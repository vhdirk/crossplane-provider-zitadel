/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SmtpConfigInitParameters struct {

	// (String) Host and port address to your SMTP server.
	// Host and port address to your SMTP server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Sensitive) Password used to communicate with your SMTP server.
	// Password used to communicate with your SMTP server.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Address to reply to.
	// Address to reply to.
	ReplyToAddress *string `json:"replyToAddress,omitempty" tf:"reply_to_address,omitempty"`

	// (String) Address used to send emails.
	// Address used to send emails.
	SenderAddress *string `json:"senderAddress,omitempty" tf:"sender_address,omitempty"`

	// (String) Sender name used to send emails.
	// Sender name used to send emails.
	SenderName *string `json:"senderName,omitempty" tf:"sender_name,omitempty"`

	// (Boolean) Set the SMTP configuration active after creating/updating
	// Set the SMTP configuration active after creating/updating
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (Boolean) TLS used to communicate with your SMTP server.
	// TLS used to communicate with your SMTP server.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// (String) User used to communicate with your SMTP server.
	// User used to communicate with your SMTP server.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SmtpConfigObservation struct {

	// (String) Host and port address to your SMTP server.
	// Host and port address to your SMTP server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Address to reply to.
	// Address to reply to.
	ReplyToAddress *string `json:"replyToAddress,omitempty" tf:"reply_to_address,omitempty"`

	// (String) Address used to send emails.
	// Address used to send emails.
	SenderAddress *string `json:"senderAddress,omitempty" tf:"sender_address,omitempty"`

	// (String) Sender name used to send emails.
	// Sender name used to send emails.
	SenderName *string `json:"senderName,omitempty" tf:"sender_name,omitempty"`

	// (Boolean) Set the SMTP configuration active after creating/updating
	// Set the SMTP configuration active after creating/updating
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (Boolean) TLS used to communicate with your SMTP server.
	// TLS used to communicate with your SMTP server.
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// (String) User used to communicate with your SMTP server.
	// User used to communicate with your SMTP server.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SmtpConfigParameters struct {

	// (String) Host and port address to your SMTP server.
	// Host and port address to your SMTP server.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String, Sensitive) Password used to communicate with your SMTP server.
	// Password used to communicate with your SMTP server.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Address to reply to.
	// Address to reply to.
	// +kubebuilder:validation:Optional
	ReplyToAddress *string `json:"replyToAddress,omitempty" tf:"reply_to_address,omitempty"`

	// (String) Address used to send emails.
	// Address used to send emails.
	// +kubebuilder:validation:Optional
	SenderAddress *string `json:"senderAddress,omitempty" tf:"sender_address,omitempty"`

	// (String) Sender name used to send emails.
	// Sender name used to send emails.
	// +kubebuilder:validation:Optional
	SenderName *string `json:"senderName,omitempty" tf:"sender_name,omitempty"`

	// (Boolean) Set the SMTP configuration active after creating/updating
	// Set the SMTP configuration active after creating/updating
	// +kubebuilder:validation:Optional
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (Boolean) TLS used to communicate with your SMTP server.
	// TLS used to communicate with your SMTP server.
	// +kubebuilder:validation:Optional
	TLS *bool `json:"tls,omitempty" tf:"tls,omitempty"`

	// (String) User used to communicate with your SMTP server.
	// User used to communicate with your SMTP server.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// SmtpConfigSpec defines the desired state of SmtpConfig
type SmtpConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SmtpConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SmtpConfigInitParameters `json:"initProvider,omitempty"`
}

// SmtpConfigStatus defines the observed state of SmtpConfig.
type SmtpConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SmtpConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SmtpConfig is the Schema for the SmtpConfigs API. Resource representing the SMTP configuration of an instance.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type SmtpConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.senderAddress) || (has(self.initProvider) && has(self.initProvider.senderAddress))",message="spec.forProvider.senderAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.senderName) || (has(self.initProvider) && has(self.initProvider.senderName))",message="spec.forProvider.senderName is a required parameter"
	Spec   SmtpConfigSpec   `json:"spec"`
	Status SmtpConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SmtpConfigList contains a list of SmtpConfigs
type SmtpConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SmtpConfig `json:"items"`
}

// Repository type metadata.
var (
	SmtpConfig_Kind             = "SmtpConfig"
	SmtpConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SmtpConfig_Kind}.String()
	SmtpConfig_KindAPIVersion   = SmtpConfig_Kind + "." + CRDGroupVersion.String()
	SmtpConfig_GroupVersionKind = CRDGroupVersion.WithKind(SmtpConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&SmtpConfig{}, &SmtpConfigList{})
}
