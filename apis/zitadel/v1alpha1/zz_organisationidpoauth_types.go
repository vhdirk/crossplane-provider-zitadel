/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganisationIdpOauthInitParameters struct {

	// (String) The authorization endpoint
	// The authorization endpoint
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) client id generated by the identity provider
	// client id generated by the identity provider
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) client secret generated by the identity provider
	// client secret generated by the identity provider
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// (String) The id attribute
	// The id attribute
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (Set of String) the scopes requested by ZITADEL during the request on the identity provider
	// the scopes requested by ZITADEL during the request on the identity provider
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The token endpoint
	// The token endpoint
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// (String) The user endpoint
	// The user endpoint
	UserEndpoint *string `json:"userEndpoint,omitempty" tf:"user_endpoint,omitempty"`
}

type OrganisationIdpOauthObservation struct {

	// (String) The authorization endpoint
	// The authorization endpoint
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) client id generated by the identity provider
	// client id generated by the identity provider
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The id attribute
	// The id attribute
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (Set of String) the scopes requested by ZITADEL during the request on the identity provider
	// the scopes requested by ZITADEL during the request on the identity provider
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The token endpoint
	// The token endpoint
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// (String) The user endpoint
	// The user endpoint
	UserEndpoint *string `json:"userEndpoint,omitempty" tf:"user_endpoint,omitempty"`
}

type OrganisationIdpOauthParameters struct {

	// (String) The authorization endpoint
	// The authorization endpoint
	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// +kubebuilder:validation:Optional
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) client id generated by the identity provider
	// client id generated by the identity provider
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) client secret generated by the identity provider
	// client secret generated by the identity provider
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// (String) The id attribute
	// The id attribute
	// +kubebuilder:validation:Optional
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	// +kubebuilder:validation:Optional
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	// +kubebuilder:validation:Optional
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	// +kubebuilder:validation:Optional
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	// +kubebuilder:validation:Optional
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (Set of String) the scopes requested by ZITADEL during the request on the identity provider
	// the scopes requested by ZITADEL during the request on the identity provider
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) The token endpoint
	// The token endpoint
	// +kubebuilder:validation:Optional
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// (String) The user endpoint
	// The user endpoint
	// +kubebuilder:validation:Optional
	UserEndpoint *string `json:"userEndpoint,omitempty" tf:"user_endpoint,omitempty"`
}

// OrganisationIdpOauthSpec defines the desired state of OrganisationIdpOauth
type OrganisationIdpOauthSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganisationIdpOauthParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganisationIdpOauthInitParameters `json:"initProvider,omitempty"`
}

// OrganisationIdpOauthStatus defines the observed state of OrganisationIdpOauth.
type OrganisationIdpOauthStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganisationIdpOauthObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganisationIdpOauth is the Schema for the OrganisationIdpOauths API. Resource representing a generic OAuth2 IDP on the organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type OrganisationIdpOauth struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizationEndpoint) || (has(self.initProvider) && has(self.initProvider.authorizationEndpoint))",message="spec.forProvider.authorizationEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientId) || (has(self.initProvider) && has(self.initProvider.clientId))",message="spec.forProvider.clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientSecretSecretRef)",message="spec.forProvider.clientSecretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idAttribute) || (has(self.initProvider) && has(self.initProvider.idAttribute))",message="spec.forProvider.idAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isAutoCreation) || (has(self.initProvider) && has(self.initProvider.isAutoCreation))",message="spec.forProvider.isAutoCreation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isAutoUpdate) || (has(self.initProvider) && has(self.initProvider.isAutoUpdate))",message="spec.forProvider.isAutoUpdate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isCreationAllowed) || (has(self.initProvider) && has(self.initProvider.isCreationAllowed))",message="spec.forProvider.isCreationAllowed is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isLinkingAllowed) || (has(self.initProvider) && has(self.initProvider.isLinkingAllowed))",message="spec.forProvider.isLinkingAllowed is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenEndpoint) || (has(self.initProvider) && has(self.initProvider.tokenEndpoint))",message="spec.forProvider.tokenEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userEndpoint) || (has(self.initProvider) && has(self.initProvider.userEndpoint))",message="spec.forProvider.userEndpoint is a required parameter"
	Spec   OrganisationIdpOauthSpec   `json:"spec"`
	Status OrganisationIdpOauthStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganisationIdpOauthList contains a list of OrganisationIdpOauths
type OrganisationIdpOauthList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganisationIdpOauth `json:"items"`
}

// Repository type metadata.
var (
	OrganisationIdpOauth_Kind             = "OrganisationIdpOauth"
	OrganisationIdpOauth_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganisationIdpOauth_Kind}.String()
	OrganisationIdpOauth_KindAPIVersion   = OrganisationIdpOauth_Kind + "." + CRDGroupVersion.String()
	OrganisationIdpOauth_GroupVersionKind = CRDGroupVersion.WithKind(OrganisationIdpOauth_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganisationIdpOauth{}, &OrganisationIdpOauthList{})
}
