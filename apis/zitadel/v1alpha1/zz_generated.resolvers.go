/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Action.
func (mg *Action) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ApplicationApi.
func (mg *ApplicationApi) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ApplicationKey.
func (mg *ApplicationKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AppID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.AppIDRef,
		Selector:     mg.Spec.ForProvider.AppIDSelector,
		To: reference.To{
			List:    &ApplicationApiList{},
			Managed: &ApplicationApi{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AppID")
	}
	mg.Spec.ForProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AppIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AppID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.AppIDRef,
		Selector:     mg.Spec.InitProvider.AppIDSelector,
		To: reference.To{
			List:    &ApplicationApiList{},
			Managed: &ApplicationApi{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AppID")
	}
	mg.Spec.InitProvider.AppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AppIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ApplicationOidc.
func (mg *ApplicationOidc) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ApplicationSaml.
func (mg *ApplicationSaml) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Domain.
func (mg *Domain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DomainClaimedMessageText.
func (mg *DomainClaimedMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DomainPoliy.
func (mg *DomainPoliy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FyEmailOtpMessageText.
func (mg *FyEmailOtpMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this HumanUser.
func (mg *HumanUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InitMessageText.
func (mg *InitMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InstanceMember.
func (mg *InstanceMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LabelPolicy.
func (mg *LabelPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LockoutPolicy.
func (mg *LockoutPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoginPolicy.
func (mg *LoginPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MachineKey.
func (mg *MachineKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &MachineUserList{},
			Managed: &MachineUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &MachineUserList{},
			Managed: &MachineUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MachineUser.
func (mg *MachineUser) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NotificationPolicy.
func (mg *NotificationPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this OrganisationMember.
func (mg *OrganisationMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PasswordChangeMessageText.
func (mg *PasswordChangeMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PasswordComplexityPolicy.
func (mg *PasswordComplexityPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PasswordResetMessageText.
func (mg *PasswordResetMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PasswordlessRegistrationMessageText.
func (mg *PasswordlessRegistrationMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PersonalAccessToken.
func (mg *PersonalAccessToken) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &MachineUserList{},
			Managed: &MachineUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &MachineUserList{},
			Managed: &MachineUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivacyPolicy.
func (mg *PrivacyPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Project.
func (mg *Project) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectGrant.
func (mg *ProjectGrant) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GrantedOrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.GrantedOrgIDRef,
		Selector:     mg.Spec.ForProvider.GrantedOrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GrantedOrgID")
	}
	mg.Spec.ForProvider.GrantedOrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GrantedOrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GrantedOrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.GrantedOrgIDRef,
		Selector:     mg.Spec.InitProvider.GrantedOrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GrantedOrgID")
	}
	mg.Spec.InitProvider.GrantedOrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GrantedOrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectGrantMember.
func (mg *ProjectGrantMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectMember.
func (mg *ProjectMember) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ProjectRole.
func (mg *ProjectRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RifySmsOtpMessageText.
func (mg *RifySmsOtpMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TriggerActions.
func (mg *TriggerActions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserGrant.
func (mg *UserGrant) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserMetadata.
func (mg *UserMetadata) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.UserIDRef,
		Selector:     mg.Spec.ForProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserID")
	}
	mg.Spec.ForProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.UserIDRef,
		Selector:     mg.Spec.InitProvider.UserIDSelector,
		To: reference.To{
			List:    &HumanUserList{},
			Managed: &HumanUser{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserID")
	}
	mg.Spec.InitProvider.UserID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VerifyEmailMessageText.
func (mg *VerifyEmailMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VerifyPhoneMessageText.
func (mg *VerifyPhoneMessageText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgIDRef,
		Selector:     mg.Spec.ForProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgID")
	}
	mg.Spec.ForProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.OrgID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.InitProvider.OrgIDRef,
		Selector:     mg.Spec.InitProvider.OrgIDSelector,
		To: reference.To{
			List:    &OrganisationList{},
			Managed: &Organisation{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.OrgID")
	}
	mg.Spec.InitProvider.OrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OrgIDRef = rsp.ResolvedReference

	return nil
}
