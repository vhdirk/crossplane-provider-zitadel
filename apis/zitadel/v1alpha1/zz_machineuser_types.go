/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MachineUserInitParameters struct {

	// (String) Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	// Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	AccessTokenType *string `json:"accessTokenType,omitempty" tf:"access_token_type,omitempty"`

	// (String) Description of the user
	// Description of the user
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the machine user
	// Name of the machine user
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organisation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) Username
	// Username
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// (Boolean) Generate machine secret, only applicable if creation or change from false
	// Generate machine secret, only applicable if creation or change from false
	WithSecret *bool `json:"withSecret,omitempty" tf:"with_secret,omitempty"`
}

type MachineUserObservation struct {

	// (String) Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	// Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	AccessTokenType *string `json:"accessTokenType,omitempty" tf:"access_token_type,omitempty"`

	// (String) Description of the user
	// Description of the user
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String) Loginnames
	// Loginnames
	LoginNames []*string `json:"loginNames,omitempty" tf:"login_names,omitempty"`

	// (String) Name of the machine user
	// Name of the machine user
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Preferred login name
	// Preferred login name
	PreferredLoginName *string `json:"preferredLoginName,omitempty" tf:"preferred_login_name,omitempty"`

	// (String) State of the user
	// State of the user
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Username
	// Username
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// (Boolean) Generate machine secret, only applicable if creation or change from false
	// Generate machine secret, only applicable if creation or change from false
	WithSecret *bool `json:"withSecret,omitempty" tf:"with_secret,omitempty"`
}

type MachineUserParameters struct {

	// (String) Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	// Access token type, supported values: ACCESS_TOKEN_TYPE_BEARER, ACCESS_TOKEN_TYPE_JWT
	// +kubebuilder:validation:Optional
	AccessTokenType *string `json:"accessTokenType,omitempty" tf:"access_token_type,omitempty"`

	// (String) Description of the user
	// Description of the user
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the machine user
	// Name of the machine user
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organisation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) Username
	// Username
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// (Boolean) Generate machine secret, only applicable if creation or change from false
	// Generate machine secret, only applicable if creation or change from false
	// +kubebuilder:validation:Optional
	WithSecret *bool `json:"withSecret,omitempty" tf:"with_secret,omitempty"`
}

// MachineUserSpec defines the desired state of MachineUser
type MachineUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MachineUserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MachineUserInitParameters `json:"initProvider,omitempty"`
}

// MachineUserStatus defines the observed state of MachineUser.
type MachineUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MachineUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MachineUser is the Schema for the MachineUsers API. Resource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type MachineUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	Spec   MachineUserSpec   `json:"spec"`
	Status MachineUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineUserList contains a list of MachineUsers
type MachineUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineUser `json:"items"`
}

// Repository type metadata.
var (
	MachineUser_Kind             = "MachineUser"
	MachineUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MachineUser_Kind}.String()
	MachineUser_KindAPIVersion   = MachineUser_Kind + "." + CRDGroupVersion.String()
	MachineUser_GroupVersionKind = CRDGroupVersion.WithKind(MachineUser_Kind)
)

func init() {
	SchemeBuilder.Register(&MachineUser{}, &MachineUserList{})
}
