/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserMetadataInitParameters struct {

	// (String) The key of a metadata entry
	// The key of a metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) ID of the user
	// ID of the user
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.HumanUser
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a HumanUser in zitadel to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a HumanUser in zitadel to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UserMetadataObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The key of a metadata entry
	// The key of a metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) ID of the user
	// ID of the user
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UserMetadataParameters struct {

	// (String) The key of a metadata entry
	// The key of a metadata entry
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) ID of the user
	// ID of the user
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.HumanUser
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a HumanUser in zitadel to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a HumanUser in zitadel to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// UserMetadataSpec defines the desired state of UserMetadata
type UserMetadataSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserMetadataParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserMetadataInitParameters `json:"initProvider,omitempty"`
}

// UserMetadataStatus defines the observed state of UserMetadata.
type UserMetadataStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserMetadataObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserMetadata is the Schema for the UserMetadatas API. Add a custom attribute to the user like the authenticating system. You can use this information in your actions.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type UserMetadata struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   UserMetadataSpec   `json:"spec"`
	Status UserMetadataStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserMetadataList contains a list of UserMetadatas
type UserMetadataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserMetadata `json:"items"`
}

// Repository type metadata.
var (
	UserMetadata_Kind             = "UserMetadata"
	UserMetadata_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserMetadata_Kind}.String()
	UserMetadata_KindAPIVersion   = UserMetadata_Kind + "." + CRDGroupVersion.String()
	UserMetadata_GroupVersionKind = CRDGroupVersion.WithKind(UserMetadata_Kind)
)

func init() {
	SchemeBuilder.Register(&UserMetadata{}, &UserMetadataList{})
}
