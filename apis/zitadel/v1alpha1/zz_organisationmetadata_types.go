/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganisationMetadataInitParameters struct {

	// (String) The key of a metadata entry
	// The key of a metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OrganisationMetadataObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The key of a metadata entry
	// The key of a metadata entry
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OrganisationMetadataParameters struct {

	// (String) The key of a metadata entry
	// The key of a metadata entry
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) The string representation of a metadata entry value. For binary data, use the base64encode function.
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// OrganisationMetadataSpec defines the desired state of OrganisationMetadata
type OrganisationMetadataSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganisationMetadataParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganisationMetadataInitParameters `json:"initProvider,omitempty"`
}

// OrganisationMetadataStatus defines the observed state of OrganisationMetadata.
type OrganisationMetadataStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganisationMetadataObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganisationMetadata is the Schema for the OrganisationMetadatas API. Add a custom attribute to the organization like its location or an identifier in another system. You can use this information in your actions.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type OrganisationMetadata struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   OrganisationMetadataSpec   `json:"spec"`
	Status OrganisationMetadataStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganisationMetadataList contains a list of OrganisationMetadatas
type OrganisationMetadataList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganisationMetadata `json:"items"`
}

// Repository type metadata.
var (
	OrganisationMetadata_Kind             = "OrganisationMetadata"
	OrganisationMetadata_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganisationMetadata_Kind}.String()
	OrganisationMetadata_KindAPIVersion   = OrganisationMetadata_Kind + "." + CRDGroupVersion.String()
	OrganisationMetadata_GroupVersionKind = CRDGroupVersion.WithKind(OrganisationMetadata_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganisationMetadata{}, &OrganisationMetadataList{})
}
