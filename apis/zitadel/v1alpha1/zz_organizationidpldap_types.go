/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationIdpLdapInitParameters struct {

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) User attribute for the avatar url
	// User attribute for the avatar url
	AvatarURLAttribute *string `json:"avatarUrlAttribute,omitempty" tf:"avatar_url_attribute,omitempty"`

	// (String) Base DN for LDAP connections
	// Base DN for LDAP connections
	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	// (String) Bind DN for LDAP connections
	// Bind DN for LDAP connections
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String, Sensitive) Bind password for LDAP connections
	// Bind password for LDAP connections
	BindPasswordSecretRef v1.SecretKeySelector `json:"bindPasswordSecretRef" tf:"-"`

	// (String) User attribute for the display name
	// User attribute for the display name
	DisplayNameAttribute *string `json:"displayNameAttribute,omitempty" tf:"display_name_attribute,omitempty"`

	// (String) User attribute for the email
	// User attribute for the email
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) User attribute for the email verified state
	// User attribute for the email verified state
	EmailVerifiedAttribute *string `json:"emailVerifiedAttribute,omitempty" tf:"email_verified_attribute,omitempty"`

	// (String) User attribute for the first name
	// User attribute for the first name
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) User attribute for the id
	// User attribute for the id
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) User attribute for the last name
	// User attribute for the last name
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) User attribute for the nick name
	// User attribute for the nick name
	NickNameAttribute *string `json:"nickNameAttribute,omitempty" tf:"nick_name_attribute,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) User attribute for the phone
	// User attribute for the phone
	PhoneAttribute *string `json:"phoneAttribute,omitempty" tf:"phone_attribute,omitempty"`

	// (String) User attribute for the phone verified state
	// User attribute for the phone verified state
	PhoneVerifiedAttribute *string `json:"phoneVerifiedAttribute,omitempty" tf:"phone_verified_attribute,omitempty"`

	// (String) User attribute for the preferred language
	// User attribute for the preferred language
	PreferredLanguageAttribute *string `json:"preferredLanguageAttribute,omitempty" tf:"preferred_language_attribute,omitempty"`

	// (String) User attribute for the preferred username
	// User attribute for the preferred username
	PreferredUsernameAttribute *string `json:"preferredUsernameAttribute,omitempty" tf:"preferred_username_attribute,omitempty"`

	// (String) User attribute for the profile
	// User attribute for the profile
	ProfileAttribute *string `json:"profileAttribute,omitempty" tf:"profile_attribute,omitempty"`

	// (List of String) Servers to try in order for establishing LDAP connections
	// Servers to try in order for establishing LDAP connections
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	// (Boolean) Wether to use StartTLS for LDAP connections
	// Wether to use StartTLS for LDAP connections
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (String) Timeout for LDAP connections
	// Timeout for LDAP connections
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) User base for LDAP connections
	// User base for LDAP connections
	UserBase *string `json:"userBase,omitempty" tf:"user_base,omitempty"`

	// (Set of String) User filters for LDAP connections
	// User filters for LDAP connections
	// +listType=set
	UserFilters []*string `json:"userFilters,omitempty" tf:"user_filters,omitempty"`

	// (Set of String) User object classes for LDAP connections
	// User object classes for LDAP connections
	// +listType=set
	UserObjectClasses []*string `json:"userObjectClasses,omitempty" tf:"user_object_classes,omitempty"`
}

type OrganizationIdpLdapObservation struct {

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) User attribute for the avatar url
	// User attribute for the avatar url
	AvatarURLAttribute *string `json:"avatarUrlAttribute,omitempty" tf:"avatar_url_attribute,omitempty"`

	// (String) Base DN for LDAP connections
	// Base DN for LDAP connections
	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	// (String) Bind DN for LDAP connections
	// Bind DN for LDAP connections
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String) User attribute for the display name
	// User attribute for the display name
	DisplayNameAttribute *string `json:"displayNameAttribute,omitempty" tf:"display_name_attribute,omitempty"`

	// (String) User attribute for the email
	// User attribute for the email
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) User attribute for the email verified state
	// User attribute for the email verified state
	EmailVerifiedAttribute *string `json:"emailVerifiedAttribute,omitempty" tf:"email_verified_attribute,omitempty"`

	// (String) User attribute for the first name
	// User attribute for the first name
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) User attribute for the id
	// User attribute for the id
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) User attribute for the last name
	// User attribute for the last name
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) User attribute for the nick name
	// User attribute for the nick name
	NickNameAttribute *string `json:"nickNameAttribute,omitempty" tf:"nick_name_attribute,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) User attribute for the phone
	// User attribute for the phone
	PhoneAttribute *string `json:"phoneAttribute,omitempty" tf:"phone_attribute,omitempty"`

	// (String) User attribute for the phone verified state
	// User attribute for the phone verified state
	PhoneVerifiedAttribute *string `json:"phoneVerifiedAttribute,omitempty" tf:"phone_verified_attribute,omitempty"`

	// (String) User attribute for the preferred language
	// User attribute for the preferred language
	PreferredLanguageAttribute *string `json:"preferredLanguageAttribute,omitempty" tf:"preferred_language_attribute,omitempty"`

	// (String) User attribute for the preferred username
	// User attribute for the preferred username
	PreferredUsernameAttribute *string `json:"preferredUsernameAttribute,omitempty" tf:"preferred_username_attribute,omitempty"`

	// (String) User attribute for the profile
	// User attribute for the profile
	ProfileAttribute *string `json:"profileAttribute,omitempty" tf:"profile_attribute,omitempty"`

	// (List of String) Servers to try in order for establishing LDAP connections
	// Servers to try in order for establishing LDAP connections
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	// (Boolean) Wether to use StartTLS for LDAP connections
	// Wether to use StartTLS for LDAP connections
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (String) Timeout for LDAP connections
	// Timeout for LDAP connections
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) User base for LDAP connections
	// User base for LDAP connections
	UserBase *string `json:"userBase,omitempty" tf:"user_base,omitempty"`

	// (Set of String) User filters for LDAP connections
	// User filters for LDAP connections
	// +listType=set
	UserFilters []*string `json:"userFilters,omitempty" tf:"user_filters,omitempty"`

	// (Set of String) User object classes for LDAP connections
	// User object classes for LDAP connections
	// +listType=set
	UserObjectClasses []*string `json:"userObjectClasses,omitempty" tf:"user_object_classes,omitempty"`
}

type OrganizationIdpLdapParameters struct {

	// (String) Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
	// +kubebuilder:validation:Optional
	AutoLinking *string `json:"autoLinking,omitempty" tf:"auto_linking,omitempty"`

	// (String) User attribute for the avatar url
	// User attribute for the avatar url
	// +kubebuilder:validation:Optional
	AvatarURLAttribute *string `json:"avatarUrlAttribute,omitempty" tf:"avatar_url_attribute,omitempty"`

	// (String) Base DN for LDAP connections
	// Base DN for LDAP connections
	// +kubebuilder:validation:Optional
	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	// (String) Bind DN for LDAP connections
	// Bind DN for LDAP connections
	// +kubebuilder:validation:Optional
	BindDn *string `json:"bindDn,omitempty" tf:"bind_dn,omitempty"`

	// (String, Sensitive) Bind password for LDAP connections
	// Bind password for LDAP connections
	// +kubebuilder:validation:Optional
	BindPasswordSecretRef v1.SecretKeySelector `json:"bindPasswordSecretRef" tf:"-"`

	// (String) User attribute for the display name
	// User attribute for the display name
	// +kubebuilder:validation:Optional
	DisplayNameAttribute *string `json:"displayNameAttribute,omitempty" tf:"display_name_attribute,omitempty"`

	// (String) User attribute for the email
	// User attribute for the email
	// +kubebuilder:validation:Optional
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// (String) User attribute for the email verified state
	// User attribute for the email verified state
	// +kubebuilder:validation:Optional
	EmailVerifiedAttribute *string `json:"emailVerifiedAttribute,omitempty" tf:"email_verified_attribute,omitempty"`

	// (String) User attribute for the first name
	// User attribute for the first name
	// +kubebuilder:validation:Optional
	FirstNameAttribute *string `json:"firstNameAttribute,omitempty" tf:"first_name_attribute,omitempty"`

	// (String) User attribute for the id
	// User attribute for the id
	// +kubebuilder:validation:Optional
	IDAttribute *string `json:"idAttribute,omitempty" tf:"id_attribute,omitempty"`

	// (Boolean) enable if a new account in ZITADEL should be created automatically on login with an external account
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	// +kubebuilder:validation:Optional
	IsAutoCreation *bool `json:"isAutoCreation,omitempty" tf:"is_auto_creation,omitempty"`

	// (Boolean) enable if a the ZITADEL account fields should be updated automatically on each login
	// enable if a the ZITADEL account fields should be updated automatically on each login
	// +kubebuilder:validation:Optional
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" tf:"is_auto_update,omitempty"`

	// (Boolean) enable if users should be able to create a new account in ZITADEL when using an external account
	// enable if users should be able to create a new account in ZITADEL when using an external account
	// +kubebuilder:validation:Optional
	IsCreationAllowed *bool `json:"isCreationAllowed,omitempty" tf:"is_creation_allowed,omitempty"`

	// (Boolean) enable if users should be able to link an existing ZITADEL user with an external account
	// enable if users should be able to link an existing ZITADEL user with an external account
	// +kubebuilder:validation:Optional
	IsLinkingAllowed *bool `json:"isLinkingAllowed,omitempty" tf:"is_linking_allowed,omitempty"`

	// (String) User attribute for the last name
	// User attribute for the last name
	// +kubebuilder:validation:Optional
	LastNameAttribute *string `json:"lastNameAttribute,omitempty" tf:"last_name_attribute,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) User attribute for the nick name
	// User attribute for the nick name
	// +kubebuilder:validation:Optional
	NickNameAttribute *string `json:"nickNameAttribute,omitempty" tf:"nick_name_attribute,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) User attribute for the phone
	// User attribute for the phone
	// +kubebuilder:validation:Optional
	PhoneAttribute *string `json:"phoneAttribute,omitempty" tf:"phone_attribute,omitempty"`

	// (String) User attribute for the phone verified state
	// User attribute for the phone verified state
	// +kubebuilder:validation:Optional
	PhoneVerifiedAttribute *string `json:"phoneVerifiedAttribute,omitempty" tf:"phone_verified_attribute,omitempty"`

	// (String) User attribute for the preferred language
	// User attribute for the preferred language
	// +kubebuilder:validation:Optional
	PreferredLanguageAttribute *string `json:"preferredLanguageAttribute,omitempty" tf:"preferred_language_attribute,omitempty"`

	// (String) User attribute for the preferred username
	// User attribute for the preferred username
	// +kubebuilder:validation:Optional
	PreferredUsernameAttribute *string `json:"preferredUsernameAttribute,omitempty" tf:"preferred_username_attribute,omitempty"`

	// (String) User attribute for the profile
	// User attribute for the profile
	// +kubebuilder:validation:Optional
	ProfileAttribute *string `json:"profileAttribute,omitempty" tf:"profile_attribute,omitempty"`

	// (List of String) Servers to try in order for establishing LDAP connections
	// Servers to try in order for establishing LDAP connections
	// +kubebuilder:validation:Optional
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	// (Boolean) Wether to use StartTLS for LDAP connections
	// Wether to use StartTLS for LDAP connections
	// +kubebuilder:validation:Optional
	StartTLS *bool `json:"startTls,omitempty" tf:"start_tls,omitempty"`

	// (String) Timeout for LDAP connections
	// Timeout for LDAP connections
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) User base for LDAP connections
	// User base for LDAP connections
	// +kubebuilder:validation:Optional
	UserBase *string `json:"userBase,omitempty" tf:"user_base,omitempty"`

	// (Set of String) User filters for LDAP connections
	// User filters for LDAP connections
	// +kubebuilder:validation:Optional
	// +listType=set
	UserFilters []*string `json:"userFilters,omitempty" tf:"user_filters,omitempty"`

	// (Set of String) User object classes for LDAP connections
	// User object classes for LDAP connections
	// +kubebuilder:validation:Optional
	// +listType=set
	UserObjectClasses []*string `json:"userObjectClasses,omitempty" tf:"user_object_classes,omitempty"`
}

// OrganizationIdpLdapSpec defines the desired state of OrganizationIdpLdap
type OrganizationIdpLdapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationIdpLdapParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationIdpLdapInitParameters `json:"initProvider,omitempty"`
}

// OrganizationIdpLdapStatus defines the observed state of OrganizationIdpLdap.
type OrganizationIdpLdapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationIdpLdapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganizationIdpLdap is the Schema for the OrganizationIdpLdaps API. Resource representing an LDAP IdP on the organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type OrganizationIdpLdap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.baseDn) || (has(self.initProvider) && has(self.initProvider.baseDn))",message="spec.forProvider.baseDn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindDn) || (has(self.initProvider) && has(self.initProvider.bindDn))",message="spec.forProvider.bindDn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindPasswordSecretRef)",message="spec.forProvider.bindPasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isAutoCreation) || (has(self.initProvider) && has(self.initProvider.isAutoCreation))",message="spec.forProvider.isAutoCreation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isAutoUpdate) || (has(self.initProvider) && has(self.initProvider.isAutoUpdate))",message="spec.forProvider.isAutoUpdate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isCreationAllowed) || (has(self.initProvider) && has(self.initProvider.isCreationAllowed))",message="spec.forProvider.isCreationAllowed is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isLinkingAllowed) || (has(self.initProvider) && has(self.initProvider.isLinkingAllowed))",message="spec.forProvider.isLinkingAllowed is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.servers) || (has(self.initProvider) && has(self.initProvider.servers))",message="spec.forProvider.servers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.startTls) || (has(self.initProvider) && has(self.initProvider.startTls))",message="spec.forProvider.startTls is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeout) || (has(self.initProvider) && has(self.initProvider.timeout))",message="spec.forProvider.timeout is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userBase) || (has(self.initProvider) && has(self.initProvider.userBase))",message="spec.forProvider.userBase is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userFilters) || (has(self.initProvider) && has(self.initProvider.userFilters))",message="spec.forProvider.userFilters is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userObjectClasses) || (has(self.initProvider) && has(self.initProvider.userObjectClasses))",message="spec.forProvider.userObjectClasses is a required parameter"
	Spec   OrganizationIdpLdapSpec   `json:"spec"`
	Status OrganizationIdpLdapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIdpLdapList contains a list of OrganizationIdpLdaps
type OrganizationIdpLdapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationIdpLdap `json:"items"`
}

// Repository type metadata.
var (
	OrganizationIdpLdap_Kind             = "OrganizationIdpLdap"
	OrganizationIdpLdap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationIdpLdap_Kind}.String()
	OrganizationIdpLdap_KindAPIVersion   = OrganizationIdpLdap_Kind + "." + CRDGroupVersion.String()
	OrganizationIdpLdap_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationIdpLdap_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationIdpLdap{}, &OrganizationIdpLdapList{})
}
