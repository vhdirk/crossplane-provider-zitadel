/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganisationIdpJwtInitParameters struct {

	// (Boolean) auto register for users from this idp
	// auto register for users from this idp
	AutoRegister *bool `json:"autoRegister,omitempty" tf:"auto_register,omitempty"`

	// (String) the name of the header where the JWT is sent in, default is authorization
	// the name of the header where the JWT is sent in, default is authorization
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// (String) the issuer of the jwt (for validation)
	// the issuer of the jwt (for validation)
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) the endpoint where the jwt can be extracted
	// the endpoint where the jwt can be extracted
	JwtEndpoint *string `json:"jwtEndpoint,omitempty" tf:"jwt_endpoint,omitempty"`

	// (String) the endpoint to the key (JWK) which are used to sign the JWT with
	// the endpoint to the key (JWK) which are used to sign the JWT with
	KeysEndpoint *string `json:"keysEndpoint,omitempty" tf:"keys_endpoint,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	// Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	StylingType *string `json:"stylingType,omitempty" tf:"styling_type,omitempty"`
}

type OrganisationIdpJwtObservation struct {

	// (Boolean) auto register for users from this idp
	// auto register for users from this idp
	AutoRegister *bool `json:"autoRegister,omitempty" tf:"auto_register,omitempty"`

	// (String) the name of the header where the JWT is sent in, default is authorization
	// the name of the header where the JWT is sent in, default is authorization
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the issuer of the jwt (for validation)
	// the issuer of the jwt (for validation)
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) the endpoint where the jwt can be extracted
	// the endpoint where the jwt can be extracted
	JwtEndpoint *string `json:"jwtEndpoint,omitempty" tf:"jwt_endpoint,omitempty"`

	// (String) the endpoint to the key (JWK) which are used to sign the JWT with
	// the endpoint to the key (JWK) which are used to sign the JWT with
	KeysEndpoint *string `json:"keysEndpoint,omitempty" tf:"keys_endpoint,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	// Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	StylingType *string `json:"stylingType,omitempty" tf:"styling_type,omitempty"`
}

type OrganisationIdpJwtParameters struct {

	// (Boolean) auto register for users from this idp
	// auto register for users from this idp
	// +kubebuilder:validation:Optional
	AutoRegister *bool `json:"autoRegister,omitempty" tf:"auto_register,omitempty"`

	// (String) the name of the header where the JWT is sent in, default is authorization
	// the name of the header where the JWT is sent in, default is authorization
	// +kubebuilder:validation:Optional
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// (String) the issuer of the jwt (for validation)
	// the issuer of the jwt (for validation)
	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) the endpoint where the jwt can be extracted
	// the endpoint where the jwt can be extracted
	// +kubebuilder:validation:Optional
	JwtEndpoint *string `json:"jwtEndpoint,omitempty" tf:"jwt_endpoint,omitempty"`

	// (String) the endpoint to the key (JWK) which are used to sign the JWT with
	// the endpoint to the key (JWK) which are used to sign the JWT with
	// +kubebuilder:validation:Optional
	KeysEndpoint *string `json:"keysEndpoint,omitempty" tf:"keys_endpoint,omitempty"`

	// (String) Name of the IDP
	// Name of the IDP
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	// Some identity providers specify the styling of the button to their login, supported values: STYLING_TYPE_UNSPECIFIED, STYLING_TYPE_GOOGLE
	// +kubebuilder:validation:Optional
	StylingType *string `json:"stylingType,omitempty" tf:"styling_type,omitempty"`
}

// OrganisationIdpJwtSpec defines the desired state of OrganisationIdpJwt
type OrganisationIdpJwtSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganisationIdpJwtParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganisationIdpJwtInitParameters `json:"initProvider,omitempty"`
}

// OrganisationIdpJwtStatus defines the observed state of OrganisationIdpJwt.
type OrganisationIdpJwtStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganisationIdpJwtObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OrganisationIdpJwt is the Schema for the OrganisationIdpJwts API. Resource representing a generic JWT IdP of the organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type OrganisationIdpJwt struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoRegister) || (has(self.initProvider) && has(self.initProvider.autoRegister))",message="spec.forProvider.autoRegister is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.headerName) || (has(self.initProvider) && has(self.initProvider.headerName))",message="spec.forProvider.headerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.issuer) || (has(self.initProvider) && has(self.initProvider.issuer))",message="spec.forProvider.issuer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.jwtEndpoint) || (has(self.initProvider) && has(self.initProvider.jwtEndpoint))",message="spec.forProvider.jwtEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keysEndpoint) || (has(self.initProvider) && has(self.initProvider.keysEndpoint))",message="spec.forProvider.keysEndpoint is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stylingType) || (has(self.initProvider) && has(self.initProvider.stylingType))",message="spec.forProvider.stylingType is a required parameter"
	Spec   OrganisationIdpJwtSpec   `json:"spec"`
	Status OrganisationIdpJwtStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganisationIdpJwtList contains a list of OrganisationIdpJwts
type OrganisationIdpJwtList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganisationIdpJwt `json:"items"`
}

// Repository type metadata.
var (
	OrganisationIdpJwt_Kind             = "OrganisationIdpJwt"
	OrganisationIdpJwt_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganisationIdpJwt_Kind}.String()
	OrganisationIdpJwt_KindAPIVersion   = OrganisationIdpJwt_Kind + "." + CRDGroupVersion.String()
	OrganisationIdpJwt_GroupVersionKind = CRDGroupVersion.WithKind(OrganisationIdpJwt_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganisationIdpJwt{}, &OrganisationIdpJwtList{})
}
