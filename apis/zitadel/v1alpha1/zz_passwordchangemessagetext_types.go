/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PasswordChangeMessageTextInitParameters struct {

	// (String)
	ButtonText *string `json:"buttonText,omitempty" tf:"button_text,omitempty"`

	// (String)
	FooterText *string `json:"footerText,omitempty" tf:"footer_text,omitempty"`

	// (String)
	Greeting *string `json:"greeting,omitempty" tf:"greeting,omitempty"`

	// (String)
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// (String)
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organisation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String)
	PreHeader *string `json:"preHeader,omitempty" tf:"pre_header,omitempty"`

	// (String)
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String)
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String)
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type PasswordChangeMessageTextObservation struct {

	// (String)
	ButtonText *string `json:"buttonText,omitempty" tf:"button_text,omitempty"`

	// (String)
	FooterText *string `json:"footerText,omitempty" tf:"footer_text,omitempty"`

	// (String)
	Greeting *string `json:"greeting,omitempty" tf:"greeting,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// (String)
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String)
	PreHeader *string `json:"preHeader,omitempty" tf:"pre_header,omitempty"`

	// (String)
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String)
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String)
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type PasswordChangeMessageTextParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	ButtonText *string `json:"buttonText,omitempty" tf:"button_text,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	FooterText *string `json:"footerText,omitempty" tf:"footer_text,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Greeting *string `json:"greeting,omitempty" tf:"greeting,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// (String)
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organisation
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organisation in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String)
	// +kubebuilder:validation:Optional
	PreHeader *string `json:"preHeader,omitempty" tf:"pre_header,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// PasswordChangeMessageTextSpec defines the desired state of PasswordChangeMessageText
type PasswordChangeMessageTextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PasswordChangeMessageTextParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PasswordChangeMessageTextInitParameters `json:"initProvider,omitempty"`
}

// PasswordChangeMessageTextStatus defines the observed state of PasswordChangeMessageText.
type PasswordChangeMessageTextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PasswordChangeMessageTextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PasswordChangeMessageText is the Schema for the PasswordChangeMessageTexts API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type PasswordChangeMessageText struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.language) || (has(self.initProvider) && has(self.initProvider.language))",message="spec.forProvider.language is a required parameter"
	Spec   PasswordChangeMessageTextSpec   `json:"spec"`
	Status PasswordChangeMessageTextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PasswordChangeMessageTextList contains a list of PasswordChangeMessageTexts
type PasswordChangeMessageTextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PasswordChangeMessageText `json:"items"`
}

// Repository type metadata.
var (
	PasswordChangeMessageText_Kind             = "PasswordChangeMessageText"
	PasswordChangeMessageText_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PasswordChangeMessageText_Kind}.String()
	PasswordChangeMessageText_KindAPIVersion   = PasswordChangeMessageText_Kind + "." + CRDGroupVersion.String()
	PasswordChangeMessageText_GroupVersionKind = CRDGroupVersion.WithKind(PasswordChangeMessageText_Kind)
)

func init() {
	SchemeBuilder.Register(&PasswordChangeMessageText{}, &PasswordChangeMessageTextList{})
}
