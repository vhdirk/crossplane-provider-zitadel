/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LabelPolicyInitParameters struct {

	// (String) hex value for background color
	// hex value for background color
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// (String) hex value for background color dark theme
	// hex value for background color dark theme
	BackgroundColorDark *string `json:"backgroundColorDark,omitempty" tf:"background_color_dark,omitempty"`

	// (Boolean) disable watermark
	// disable watermark
	DisableWatermark *bool `json:"disableWatermark,omitempty" tf:"disable_watermark,omitempty"`

	// (String) hex value for font color
	// hex value for font color
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// (String) hex value for font color dark theme
	// hex value for font color dark theme
	FontColorDark *string `json:"fontColorDark,omitempty" tf:"font_color_dark,omitempty"`

	// (String)
	FontHash *string `json:"fontHash,omitempty" tf:"font_hash,omitempty"`

	// (String)
	FontPath *string `json:"fontPath,omitempty" tf:"font_path,omitempty"`

	// scopes
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix *bool `json:"hideLoginNameSuffix,omitempty" tf:"hide_login_name_suffix,omitempty"`

	// (String)
	IconDarkHash *string `json:"iconDarkHash,omitempty" tf:"icon_dark_hash,omitempty"`

	// (String)
	IconDarkPath *string `json:"iconDarkPath,omitempty" tf:"icon_dark_path,omitempty"`

	// (String)
	IconHash *string `json:"iconHash,omitempty" tf:"icon_hash,omitempty"`

	// (String)
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// (String)
	LogoDarkHash *string `json:"logoDarkHash,omitempty" tf:"logo_dark_hash,omitempty"`

	// (String)
	LogoDarkPath *string `json:"logoDarkPath,omitempty" tf:"logo_dark_path,omitempty"`

	// (String)
	LogoHash *string `json:"logoHash,omitempty" tf:"logo_hash,omitempty"`

	// (String)
	LogoPath *string `json:"logoPath,omitempty" tf:"logo_path,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) hex value for primary color
	// hex value for primary color
	PrimaryColor *string `json:"primaryColor,omitempty" tf:"primary_color,omitempty"`

	// (String) hex value for primary color dark theme
	// hex value for primary color dark theme
	PrimaryColorDark *string `json:"primaryColorDark,omitempty" tf:"primary_color_dark,omitempty"`

	// (Boolean) set the label policy active after creating/updating
	// set the label policy active after creating/updating
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (String) theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	// theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	ThemeMode *string `json:"themeMode,omitempty" tf:"theme_mode,omitempty"`

	// (String) hex value for warn color
	// hex value for warn color
	WarnColor *string `json:"warnColor,omitempty" tf:"warn_color,omitempty"`

	// (String) hex value for warn color dark theme
	// hex value for warn color dark theme
	WarnColorDark *string `json:"warnColorDark,omitempty" tf:"warn_color_dark,omitempty"`
}

type LabelPolicyObservation struct {

	// (String) hex value for background color
	// hex value for background color
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// (String) hex value for background color dark theme
	// hex value for background color dark theme
	BackgroundColorDark *string `json:"backgroundColorDark,omitempty" tf:"background_color_dark,omitempty"`

	// (Boolean) disable watermark
	// disable watermark
	DisableWatermark *bool `json:"disableWatermark,omitempty" tf:"disable_watermark,omitempty"`

	// (String) hex value for font color
	// hex value for font color
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// (String) hex value for font color dark theme
	// hex value for font color dark theme
	FontColorDark *string `json:"fontColorDark,omitempty" tf:"font_color_dark,omitempty"`

	// (String)
	FontHash *string `json:"fontHash,omitempty" tf:"font_hash,omitempty"`

	// (String)
	FontPath *string `json:"fontPath,omitempty" tf:"font_path,omitempty"`

	// (String)
	FontURL *string `json:"fontUrl,omitempty" tf:"font_url,omitempty"`

	// scopes
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix *bool `json:"hideLoginNameSuffix,omitempty" tf:"hide_login_name_suffix,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	IconDarkHash *string `json:"iconDarkHash,omitempty" tf:"icon_dark_hash,omitempty"`

	// (String)
	IconDarkPath *string `json:"iconDarkPath,omitempty" tf:"icon_dark_path,omitempty"`

	// (String)
	IconHash *string `json:"iconHash,omitempty" tf:"icon_hash,omitempty"`

	// (String)
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// (String)
	IconURL *string `json:"iconUrl,omitempty" tf:"icon_url,omitempty"`

	// (String)
	IconURLDark *string `json:"iconUrlDark,omitempty" tf:"icon_url_dark,omitempty"`

	// (String)
	LogoDarkHash *string `json:"logoDarkHash,omitempty" tf:"logo_dark_hash,omitempty"`

	// (String)
	LogoDarkPath *string `json:"logoDarkPath,omitempty" tf:"logo_dark_path,omitempty"`

	// (String)
	LogoHash *string `json:"logoHash,omitempty" tf:"logo_hash,omitempty"`

	// (String)
	LogoPath *string `json:"logoPath,omitempty" tf:"logo_path,omitempty"`

	// (String)
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`

	// (String)
	LogoURLDark *string `json:"logoUrlDark,omitempty" tf:"logo_url_dark,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// (String) hex value for primary color
	// hex value for primary color
	PrimaryColor *string `json:"primaryColor,omitempty" tf:"primary_color,omitempty"`

	// (String) hex value for primary color dark theme
	// hex value for primary color dark theme
	PrimaryColorDark *string `json:"primaryColorDark,omitempty" tf:"primary_color_dark,omitempty"`

	// (Boolean) set the label policy active after creating/updating
	// set the label policy active after creating/updating
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (String) theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	// theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	ThemeMode *string `json:"themeMode,omitempty" tf:"theme_mode,omitempty"`

	// (String) hex value for warn color
	// hex value for warn color
	WarnColor *string `json:"warnColor,omitempty" tf:"warn_color,omitempty"`

	// (String) hex value for warn color dark theme
	// hex value for warn color dark theme
	WarnColorDark *string `json:"warnColorDark,omitempty" tf:"warn_color_dark,omitempty"`
}

type LabelPolicyParameters struct {

	// (String) hex value for background color
	// hex value for background color
	// +kubebuilder:validation:Optional
	BackgroundColor *string `json:"backgroundColor,omitempty" tf:"background_color,omitempty"`

	// (String) hex value for background color dark theme
	// hex value for background color dark theme
	// +kubebuilder:validation:Optional
	BackgroundColorDark *string `json:"backgroundColorDark,omitempty" tf:"background_color_dark,omitempty"`

	// (Boolean) disable watermark
	// disable watermark
	// +kubebuilder:validation:Optional
	DisableWatermark *bool `json:"disableWatermark,omitempty" tf:"disable_watermark,omitempty"`

	// (String) hex value for font color
	// hex value for font color
	// +kubebuilder:validation:Optional
	FontColor *string `json:"fontColor,omitempty" tf:"font_color,omitempty"`

	// (String) hex value for font color dark theme
	// hex value for font color dark theme
	// +kubebuilder:validation:Optional
	FontColorDark *string `json:"fontColorDark,omitempty" tf:"font_color_dark,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	FontHash *string `json:"fontHash,omitempty" tf:"font_hash,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	FontPath *string `json:"fontPath,omitempty" tf:"font_path,omitempty"`

	// scopes
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	// +kubebuilder:validation:Optional
	HideLoginNameSuffix *bool `json:"hideLoginNameSuffix,omitempty" tf:"hide_login_name_suffix,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IconDarkHash *string `json:"iconDarkHash,omitempty" tf:"icon_dark_hash,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IconDarkPath *string `json:"iconDarkPath,omitempty" tf:"icon_dark_path,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IconHash *string `json:"iconHash,omitempty" tf:"icon_hash,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IconPath *string `json:"iconPath,omitempty" tf:"icon_path,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LogoDarkHash *string `json:"logoDarkHash,omitempty" tf:"logo_dark_hash,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LogoDarkPath *string `json:"logoDarkPath,omitempty" tf:"logo_dark_path,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LogoHash *string `json:"logoHash,omitempty" tf:"logo_hash,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	LogoPath *string `json:"logoPath,omitempty" tf:"logo_path,omitempty"`

	// (String) ID of the organization
	// ID of the organization
	// +crossplane:generate:reference:type=github.com/vhdirk/crossplane-provider-zitadel/apis/zitadel/v1alpha1.Organization
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("id", true)
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Reference to a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDRef *v1.Reference `json:"orgIdRef,omitempty" tf:"-"`

	// Selector for a Organization in zitadel to populate orgId.
	// +kubebuilder:validation:Optional
	OrgIDSelector *v1.Selector `json:"orgIdSelector,omitempty" tf:"-"`

	// (String) hex value for primary color
	// hex value for primary color
	// +kubebuilder:validation:Optional
	PrimaryColor *string `json:"primaryColor,omitempty" tf:"primary_color,omitempty"`

	// (String) hex value for primary color dark theme
	// hex value for primary color dark theme
	// +kubebuilder:validation:Optional
	PrimaryColorDark *string `json:"primaryColorDark,omitempty" tf:"primary_color_dark,omitempty"`

	// (Boolean) set the label policy active after creating/updating
	// set the label policy active after creating/updating
	// +kubebuilder:validation:Optional
	SetActive *bool `json:"setActive,omitempty" tf:"set_active,omitempty"`

	// (String) theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	// theme mode, supported values: THEME_MODE_UNSPECIFIED, THEME_MODE_AUTO, THEME_MODE_DARK, THEME_MODE_LIGHT
	// +kubebuilder:validation:Optional
	ThemeMode *string `json:"themeMode,omitempty" tf:"theme_mode,omitempty"`

	// (String) hex value for warn color
	// hex value for warn color
	// +kubebuilder:validation:Optional
	WarnColor *string `json:"warnColor,omitempty" tf:"warn_color,omitempty"`

	// (String) hex value for warn color dark theme
	// hex value for warn color dark theme
	// +kubebuilder:validation:Optional
	WarnColorDark *string `json:"warnColorDark,omitempty" tf:"warn_color_dark,omitempty"`
}

// LabelPolicySpec defines the desired state of LabelPolicy
type LabelPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LabelPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LabelPolicyInitParameters `json:"initProvider,omitempty"`
}

// LabelPolicyStatus defines the observed state of LabelPolicy.
type LabelPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LabelPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LabelPolicy is the Schema for the LabelPolicys API. Resource representing the custom label policy of an organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zitadel}
type LabelPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backgroundColor) || (has(self.initProvider) && has(self.initProvider.backgroundColor))",message="spec.forProvider.backgroundColor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backgroundColorDark) || (has(self.initProvider) && has(self.initProvider.backgroundColorDark))",message="spec.forProvider.backgroundColorDark is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.disableWatermark) || (has(self.initProvider) && has(self.initProvider.disableWatermark))",message="spec.forProvider.disableWatermark is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fontColor) || (has(self.initProvider) && has(self.initProvider.fontColor))",message="spec.forProvider.fontColor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fontColorDark) || (has(self.initProvider) && has(self.initProvider.fontColorDark))",message="spec.forProvider.fontColorDark is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hideLoginNameSuffix) || (has(self.initProvider) && has(self.initProvider.hideLoginNameSuffix))",message="spec.forProvider.hideLoginNameSuffix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.primaryColor) || (has(self.initProvider) && has(self.initProvider.primaryColor))",message="spec.forProvider.primaryColor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.primaryColorDark) || (has(self.initProvider) && has(self.initProvider.primaryColorDark))",message="spec.forProvider.primaryColorDark is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warnColor) || (has(self.initProvider) && has(self.initProvider.warnColor))",message="spec.forProvider.warnColor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warnColorDark) || (has(self.initProvider) && has(self.initProvider.warnColorDark))",message="spec.forProvider.warnColorDark is a required parameter"
	Spec   LabelPolicySpec   `json:"spec"`
	Status LabelPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LabelPolicyList contains a list of LabelPolicys
type LabelPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LabelPolicy `json:"items"`
}

// Repository type metadata.
var (
	LabelPolicy_Kind             = "LabelPolicy"
	LabelPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LabelPolicy_Kind}.String()
	LabelPolicy_KindAPIVersion   = LabelPolicy_Kind + "." + CRDGroupVersion.String()
	LabelPolicy_GroupVersionKind = CRDGroupVersion.WithKind(LabelPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&LabelPolicy{}, &LabelPolicyList{})
}
